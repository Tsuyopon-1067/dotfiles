{
	"input": {
		"prefix": "input",
		"body": [
			"proconio::input! {",
			"\t${1:n}: ${2:i64},",
			"}"
		],
		"description": "input macro"
	},
	"for loop": {
		"prefix": "for",
		"body": [
			"for ${1:i} in 0..${2:n} {",
			"\t${0}",
			"}"
		],
		"description": "for loop n times"
	},
	"for each": {
		"prefix": "fore",
		"body": [
			"for ${1:v} in $2{2:list}.iter() {",
			"\t${0}",
			"}"
		],
		"description": "for each"
	},
	"new HashMap": {
		"prefix": "nhash",
		"body": [
			"let mut ${1:map} = HashMap::new();${0}"
		],
		"description": "new HashMap"
	},
	"new HashSet": {
		"prefix": "nset",
		"body": [
			"let mut ${1:set}: HashSet<${2:i64}> = HashSet::new();${0}"
		],
		"description": "new HashSet"
	},
	"existence from HashMap": {
		"prefix": "existmap",
		"body": [
			"match ${1:map}.entry(c) {",
			"\tstd::collections::hash_map::Entry::Occupied(mut entry) => {",
			"\t\t// get entry.get()",
			"\t\t}",
			"\t}",
			"std::collections::hash_map::Entry::Vacant(entry) => {",
			"\t",
			"}"
		],
		"description": "verify the existence from HashMap"
	},
	"vec max": {
		"prefix": "vecmax",
		"body": [
			"if let Some(max_value) = ${1:list}.iter().max() {",
			"println!(\"{}\", max_value);",
			"}"
		],
		"description": "get max value from Vec"
	},
	"Point struct": {
		"prefix": "pointstr",
		"body": [
			"struct Point {",
			"\tx: i64,",
			"\ty: i64,",
			"}"
		],
		"description": "get min value from Vec"
	},
	"sub string": {
		"prefix": "substr",
		"body": [
			"let ${1:str} = ${2:s}[${3:i}..${4:j}].to_string().clone();${0}"
		],
		"description": "new HashMap"
	}
}
