{
	"input i64x2": {
		"prefix": "inputii",
		"body": [
			"proconio::input! {",
			"\t${1:a}: i64,",
			"\t${2:b}: i64,",
			"}"
		],
		"description": "input macro"
	},
	"input String": {
		"prefix": "inputs",
		"body": [
			"proconio::input! {",
			"\t${1:s}: ${2:String},",
			"}"
		],
		"description": "input macro"
	},
	"input": {
		"prefix": "input",
		"body": [
			"proconio::input! {",
			"\t${1:n}: ${2:i64},",
			"}"
		],
		"description": "input macro"
	},
	"input vec": {
		"prefix": "inputvec",
		"body": [
			"proconio::input! {",
			"\t${1:len}: i64,",
			"}",
			"let mut ${2:vec} = vec![];",
			"for _ in 0..$1 {",
			"\tproconio::input! {",
			"\t\ttmp: i64,",
			"\t}",
			"\t$2.push(tmp);",
			"}"
		],
		"description": "input macro"
	},
	"for loop": {
		"prefix": "for",
		"body": [
			"for ${1:i} in 0..${2:n} {",
			"\t${0}",
			"}"
		],
		"description": "for loop n times"
	},
	"for each": {
		"prefix": "fore",
		"body": [
			"for ${1:v} in ${2:list}.iter() {",
			"\t${0}",
			"}"
		],
		"description": "for each"
	},
	"new HashMap": {
		"prefix": "nmap",
		"body": [
			"let mut ${1:map} = HashMap::new();${0}"
		],
		"description": "new HashMap"
	},
	"new HashSet": {
		"prefix": "nset",
		"body": [
			"let mut ${1:set}: HashSet<${2:i64}> = HashSet::new();${0}"
		],
		"description": "new HashSet"
	},
	"existence from HashMap": {
		"prefix": "existmap",
		"body": [
			"match ${1:map}.entry(c) {",
			"\tstd::collections::hash_map::Entry::Occupied(mut entry) => {",
			"\t\t// get entry.get()",
			"\t\t}",
			"\t}",
			"std::collections::hash_map::Entry::Vacant(entry) => {",
			"\t",
			"}"
		],
		"description": "verify the existence from HashMap"
	},
	"vec max": {
		"prefix": "vecmax",
		"body": [
			"if let Some(max_value) = ${1:list}.iter().max() {",
			"println!(\"{}\", max_value);",
			"}"
		],
		"description": "get max value from Vec"
	},
	"Point struct": {
		"prefix": "pointstr",
		"body": [
			"struct Point {",
			"\tx: i64,",
			"\ty: i64,",
			"}"
		],
		"description": "get min value from Vec"
	},
	"sub string": {
		"prefix": "substr",
		"body": [
			"let ${1:str} = ${2:s}[${3:i}..${4:j}].to_string().clone();${0}"
		],
		"description": "new HashMap"
	},
	"string reverse": {
		"prefix": "strrev",
		"body": [
			"${1:s}.chars().rev().collect: :<String>()"
		],
		"description": "reverse string"
	},
	"use std::collections::HashMap;": {
		"prefix": "usemap",
		"body": [
			"use std::collections::HashMap;"
		],
		"description": "use HashMap"
	},
	"Rust Scanner": {
		"prefix": "atmain",
		"body": [
			"use std;",
			"use std::io::{BufRead, Stdin, StdinLock};",
			"use std::str::FromStr;",
			"",
			"pub struct Scanner<'a> {",
			"    reader: StdinLock<'a>,",
			"    buf: String,",
			"    words: Vec<String>,",
			"}",
			"",
			"impl<'a> Scanner<'a> {",
			"    pub fn new(stdin: &'a Stdin) -> Self {",
			"        Scanner {",
			"            reader: stdin.lock(),",
			"            buf: String::new(),",
			"            words: Vec::new(),",
			"        }",
			"    }",
			"    ",
			"    pub fn next<T: FromStr>(&mut self) -> T {",
			"        if self.words.is_empty() {",
			"            self.buf.clear();",
			"            self.reader",
			"                .read_line(&mut self.buf)",
			"                .expect(\"Failed to read line\");",
			"            self.words = self.buf.split_whitespace().map(String::from).collect();",
			"        }",
			"        self.words",
			"            .remove(0)",
			"            .parse()",
			"            .unwrap_or_else(|_| panic!(\"Failed to parse\"))",
			"    }",
			"    ",
			"    pub fn next_line(&mut self) -> String {",
			"        self.buf.clear();",
			"        self.reader",
			"            .read_line(&mut self.buf)",
			"            .expect(\"Failed to read line\");",
			"        self.buf.trim().to_string()",
			"    }",
			"    ",
			"    pub fn next_vec<T: FromStr>(&mut self, n: usize) -> Vec<T> {",
			"        (0..n).map(|_| self.next::<T>()).collect()",
			"    }",
			"    ",
			"    pub fn next_chars(&mut self) -> Vec<char> {",
			"        self.next::<String>().chars().collect()",
			"    }",
			"    ",
			"    pub fn next_matrix<T: FromStr>(&mut self, h: usize, w: usize) -> Vec<Vec<T>> {",
			"        (0..h).map(|_| self.next_vec(w)).collect()",
			"    }",
			"}",
			"",
			"fn main() {",
			"    solve();",
			"}",
			"",
			"fn solve() {",
			"    let stdin = std::io::stdin();",
			"    let mut sc = Scanner::new(&stdin);",
			"    $0",
			"}"
		],
		"description": "Rust Scanner template for competitive programming"
	}
}
